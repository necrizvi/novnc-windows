name: RustDesk Remote (Windows Server 2022)
on: workflow_dispatch

jobs:
  remote:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Prep PowerShell
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "OS:" (Get-ComputerInfo).OsName (Get-ComputerInfo).OsVersion

      - name: Install Chocolatey
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-Expression ((New-Object Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco --version

      - name: Install RustDesk (portable)
        shell: pwsh
        run: |
          choco install rustdesk.portable -y --no-progress
          # Find either rustdesk.exe or rustdesk-qs.exe in the Chocolatey tools folder
          $tools = Join-Path $env:ProgramData "chocolatey\lib\rustdesk.portable\tools"
          if (-not (Test-Path $tools)) { throw "RustDesk tools folder not found: $tools" }
          $candidates = @(
            Join-Path $tools "rustdesk.exe"),
            (Join-Path $tools "rustdesk-qs.exe"
          )
          $exe = $candidates | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $exe) {
            # Fallback: pick any rustdesk*.exe
            $exe = (Get-ChildItem -Path $tools -Filter "rustdesk*.exe" -ErrorAction Stop | Select-Object -First 1).FullName
          }
          if (-not $exe) { throw "RustDesk executable not found in $tools" }
          Write-Host "Using RustDesk executable: $exe"
          # Persist path for later steps
          'RUSTDESK_EXE={0}' -f $exe | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Set unattended password and start RustDesk
        shell: pwsh
        run: |
          $rd = $env:RUSTDESK_EXE
          if (-not (Test-Path $rd)) { throw "RustDesk exe missing: $rd" }

          # Set permanent password (no env vars)
          & $rd --password "vnc@4321" | Out-Host

          # Start RustDesk in background (hidden is fine)
          Start-Process -FilePath $rd -WindowStyle Hidden

          # Give it a moment to register / reach relay
          Start-Sleep -Seconds 8

      - name: Show RustDesk ID (use this to connect)
        shell: pwsh
        run: |
          $rd = $env:RUSTDESK_EXE
          $id = ""
          # Try up to ~60s for the ID to appear
          for ($i=0; $i -lt 30 -and [string]::IsNullOrWhiteSpace($id); $i++) {
            try {
              $id = (& $rd --get-id) 2>$null
              if (-not [string]::IsNullOrWhiteSpace($id)) { break }
            } catch { }
            Start-Sleep -Seconds 2
          }

          Write-Host "----------------------------------------------------"
          if ([string]::IsNullOrWhiteSpace($id)) {
            Write-Host "RustDesk ID not yet available. Let it run a bit longer, then re-check logs."
          } else {
            $id = $id.Trim()
            Write-Host "RustDesk ID: $id"
          }
          Write-Host "Password   : vnc@4321"
          Write-Host "Open RustDesk on your computer, enter the ID above, and connect."
          Write-Host "----------------------------------------------------"

      - name: Keep alive
        shell: pwsh
        run: |
          for ($i=0; $i -lt 43200; $i++) {
            Write-Host "alive $(Get-Date -Format s)"
            Start-Sleep -Seconds 60
          }
