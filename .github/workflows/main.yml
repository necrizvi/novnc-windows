name: Browser Desktop (noVNC) â€“ Windows Server 2022
on: workflow_dispatch

jobs:
  desktop:
    runs-on: windows-latest   # Windows Server 2022 on GitHub-hosted runners
    timeout-minutes: 360

    steps:
      - name: Prep PowerShell
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Windows version:" (Get-ComputerInfo).OsName (Get-ComputerInfo).OsVersion

      - name: Install Chocolatey
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
          Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco --version

      - name: Install TightVNC Server
        shell: pwsh
        run: |
          choco install tightvnc -y
          $tvnExe = "${env:ProgramFiles}\TightVNC\tvnserver.exe"
          if (-not (Test-Path $tvnExe)) { throw "TightVNC tvnserver.exe not found at $tvnExe" }

          # Install and configure TightVNC service
          & $tvnExe -install

          # Set password (primary) to vnc@4321 (no env vars)
          # Newer TightVNC supports -controlservice -password; fallback also sets registry keys.
          try {
            & $tvnExe -controlservice -password "vnc@4321"
          } catch {
            Write-Warning "Falling back to registry-based password configuration."
            $bytes = [System.Text.Encoding]::ASCII.GetBytes("vnc@4321")
            New-Item -Path 'HKLM:\Software\TightVNC\Server' -Force | Out-Null
            # TightVNC expects an obfuscated binary; the direct plaintext is a fallback and may not work on all versions.
            # If needed, you can swap this for a precomputed REG_BINARY for the Password value.
            New-ItemProperty -Path 'HKLM:\Software\TightVNC\Server' -Name 'Password' -PropertyType Binary -Value $bytes -Force | Out-Null
          }

          # Allow connections from localhost (websockify) and start service
          New-ItemProperty -Path 'HKLM:\Software\TightVNC\Server' -Name 'AllowLoopback' -PropertyType DWord -Value 1 -Force | Out-Null
          Start-Service -Name tvnserver

      - name: Clone noVNC
        shell: pwsh
        run: |
          git clone https://github.com/novnc/noVNC $env:USERPROFILE\noVNC

      - name: Install Python deps (websockify)
        shell: pwsh
        run: |
          python --version
          pip install --upgrade pip
          pip install websockify

      - name: Start websockify (VNC WS bridge)
        shell: pwsh
        run: |
          # Bridge noVNC websocket :5901 -> TightVNC :5900
          Start-Process -WindowStyle Hidden -FilePath python -ArgumentList "-m","websockify","--web","$env:USERPROFILE\noVNC","5901","localhost:5900" 

      - name: Serve noVNC on :6080
        shell: pwsh
        run: |
          # Host noVNC static files on http://127.0.0.1:6080
          Push-Location $env:USERPROFILE\noVNC
          Start-Process -WindowStyle Hidden -FilePath python -ArgumentList "-m","http.server","6080"
          Pop-Location

      - name: Download & run cloudflared
        shell: pwsh
        run: |
          $cfUrl = "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe"
          $cfExe = "$env:USERPROFILE\cloudflared.exe"
          Invoke-WebRequest -Uri $cfUrl -OutFile $cfExe
          # Expose local HTTP server (noVNC) via Cloudflare tunnel
          Start-Process -FilePath $cfExe -ArgumentList "tunnel","--url","http://127.0.0.1:6080","--no-autoupdate" -RedirectStandardOutput "$env:USERPROFILE\tunnel.log" -RedirectStandardError "$env:USERPROFILE\tunnel.log"
          Start-Sleep -Seconds 10
          Write-Host "----------------------------------------------------"
          Write-Host "Your noVNC URL(s):"
          (Get-Content "$env:USERPROFILE\tunnel.log" -Raw) -split "`n" | Select-String -Pattern 'https://[-a-z0-9]+\.trycloudflare\.com' -AllMatches | ForEach-Object { $_.Matches.Value } | Sort-Object -Unique | ForEach-Object { Write-Host $_ }
          Write-Host "----------------------------------------------------"
          Write-Host "VNC password: vnc@4321"
          Write-Host "If the noVNC page loads but does not connect, open 'vnc.html?path=websockify&host=127.0.0.1&port=5901' on that URL."
          Write-Host "----------------------------------------------------"

      - name: Keep alive
        shell: pwsh
        run: |
          for ($i=0; $i -lt 43200; $i++) { Write-Host "alive $(Get-Date)"; Start-Sleep -Seconds 60 }
